* Team Cute Cyclops Cult 
  * Faiza Huda, Tasnim Chowdhury, Rin Fukuoka, 
  * APCS
  * L03 -- Get Empirical
 
 # 12-21-2021 Gallery Tour: 
 Team FrogHats:
  - Results aligned and consistent
  - 4 test cases with 20 trials each:
      - random target in 10 item array
      - random target in 9.9 million item array
      - last element in 10 item array (worst case)
      - last element in 9.9 million item array (worst case)
  - Found a variance based on computers (rm 251 vs rm 307 csdojo)
  
 Team Walrus:
  - Results aligned and consistent
  - 50k trials on 1 million item array
      - targets on the 2nd half to ensure something similar to last case but still have some randomness
      - only 1 size tested
  - Also implemented soft measurements: how many times the array was accessed for both search algos
  
 Team Discord Ducks:
  - Results aligned and consistent
  - 7 test cases with 100 trials each:
      - different array lengths for each test case (up to 50 million)
      - 100 random targets for each
      - Not worse case but rationalized what worse case results may produce
  - Used a data table and also output snippets in ReadMe
  
 Team Three Lucky Duckies
  - Two test cases:
       - Searching for 200 random element in array 
       - Searching for the last element in array
  - Prints out the sum of 100 trials 
  -Uses a data table with 3 trials for each test cases
       
 Team Perfect Purple Petunias
  - Prints out the results for LinSearch, BinSearch, and their difference 
  - Takes the time taken for 100 trials to run
  - Got data suggesting that linear search is faster than binary search when using int[]

 Team We Forgot
  - Runs search for every element in the array 
  - Tables and graphs to represent the obtained data
  - Data suggests that as the array size increases, linear search takes more time while binary search 
    relatively takes the same amount of time 
    

 
 # 12-20-2021
 DISCOS/Notes:
 * Don't need to allocate heap space to run searches on arrays of larger size (200mill+), instead increase the number of trials to find a measureable difference between binSearch and linSearch
 * Running 100 trials is fine as it creates a measureable difference between binSearch and linSearch, so running 1000 is uneccesary and time consuming
 * Worst case scenario for this experiment is when target is the last element of an array, therefore the target element for the searchs should be the length of the array -1. (Or the target does not exist in array)
 * Cannot use the get method for Comparables, since it is a method for ArrayList
 QCC:
 * Should we comment out all our other arrays being tested and test them individually in order to be able to use arrays of higher size without Java running out of memory?
 
 # 12-19-2021
 DISCOS/Notes:
 * Running a test on arrays with more than 210 million elements causes an Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
 * Piazza post solution: increase the space allotted to JVM by saying java -Xmx3072m ClassName
 QCC:
 * Piazza solution does not seem to be working still :/
 
 # 12-18-2021
 DISCOS/Notes:
 * To make large numbers readable, use underscores (eg. 1_000_000 is 1 million)  
 
 #1 12-17-2021
 DISCOS/Notes:
 * Must use System.currentTimeMillis(); to record times
 QCC:
 * Should we use OrderedArrayList or just a normal Array or just an Array? Will choosing one over have complications in the future (ie different methods)?
